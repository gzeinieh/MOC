/**
 * Sequelize initialization module
 */

'use strict';

import path from 'path';
import config from '../config/environment';
import Sequelize from 'sequelize';

var db = {
  Sequelize: Sequelize,
  sequelize: new Sequelize(config.sequelize.uri, config.sequelize.options)
};

// Insert models below
db.Bus = db.sequelize.import('../api/bus/bus.model');
db.Command = db.sequelize.import('../api/command/command.model');
db.Command_status = db.sequelize.import('../api/command_status/command_status.model');
db.Groundstation = db.sequelize.import('../api/groundstation/groundstation.model');
db.Mission = db.sequelize.import('../api/mission/mission.model');
db.Pass = db.sequelize.import('../api/pass/pass.model');
db.Payload = db.sequelize.import('../api/payload/payload.model');
db.Radio = db.sequelize.import('../api/radio/radio.model');
db.Satellite = db.sequelize.import('../api/satellite/satellite.model');
db.Segment = db.sequelize.import('../api/segment/segment.model');
db.Sensor = db.sequelize.import('../api/sensor/sensor.model');
db.User = db.sequelize.import('../api/user/user.model');

// Database Relations

// 1:1 

//1:M 
db.Bus.hasMany(db.Satellite);
db.Command.hasMany(db.Command_status);
db.Groundstation.hasMany(db.Radio);
db.Mission.hasMany(db.Pass);
db.Mission.hasMany(db.Satellite);
db.Pass.hasMany(db.Segment, {as: 'segments'});
db.Satellite.hasMany(db.Payload);
db.Satellite.hasMany(db.Radio);
db.User.hasMany(db.Command_status);

// N:M 
db.User.belongsToMany(db.Mission, {through: 'User_Mission'});
db.Mission.belongsToMany(db.User, {through: 'User_Mission'});
db.Mission.belongsToMany(db.Groundstation, {through: 'Mission_Groundstation'});
db.Groundstation.belongsToMany(db.Mission, {through: 'Mission_Groundstation'});
db.Satellite.belongsToMany(db.Sensor, {through: 'Satellite_Sensor'});
db.Sensor.belongsToMany(db.Satellite, {through: 'Satellite_Sensor'});
db.Segment.belongsToMany(db.Command, {through: 'Segment_Command'});
db.Command.belongsToMany(db.Segment, {through: 'Segment_Command'});
db.Command.belongsToMany(db.Bus, {through: 'Bus_Command'});
db.Bus.belongsToMany(db.Command, {through: 'Bus_Command'});
db.Groundstation.belongsToMany(db.Radio, {through: 'Groundstation_Radio'});
db.Radio.belongsToMany(db.Groundstation, {through: 'Groundstation_Radio'});

// Sensor Data Table Relations 1:M
// example syntax for each sensor
// db.Sensor.hasMany(db."sensor_sata_SensorModel");

module.exports = db;
