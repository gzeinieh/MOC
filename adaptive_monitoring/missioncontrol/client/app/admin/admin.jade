navbar
.container
  p
    | The delete user and user index api routes are restricted to users with the 'admin' role.
  ul.list-group
    li.list-group-item(ng-repeat='user in users')
      strong {{user.name}}
      br
      span.text-muted {{user.email}}
      | #{' - '}
      span.text-muted {{user.role}}
      a.trash(ng-click='delete(user)')
        span.glyphicon.glyphicon-trash.pull-right
      form.form(name='form', ng-submit='assign(form, user)', novalidate='')
        .form-group
          label Role
          select.form-control(name='newRole', ng-model='user.role', ng-options='x for x in roles')
                    
        div
        button.btn.btn-inverse.btn-assign(type='submit')
          | Assign Role
        = ' '
  p
  .col-sm-12
      strong Create a new user:
      form.form(name='form', ng-submit='register(form)', novalidate='')
        .form-group(ng-class='{ "has-success": form.name.$valid && submitted,\
        "has-error": form.name.$invalid && submitted }')
          label Name
          input.form-control(type='text', name='name', ng-model='user.name', required='')
          p.help-block(ng-show='form.name.$error.required && submitted')
            | A name is required

        .form-group(ng-class='{ "has-success": form.email.$valid && submitted,\
        "has-error": form.email.$invalid && submitted }')
          label Email
          input.form-control(type='email', name='email', ng-model='user.email', required='', mongoose-error='')
          p.help-block(ng-show='form.email.$error.email && submitted')
            | Doesn't look like a valid email.
          p.help-block(ng-show='form.email.$error.required && submitted')
            | What's your email address?
          p.help-block(ng-show='form.email.$error.mongoose')
            | {{ errors.email }}

        .form-group(ng-class='{ "has-success": form.password.$valid && submitted,\
        "has-error": form.password.$invalid && submitted }')
          label Password
          input.form-control(type='password'
            name='password'
            ng-model='user.password'
            mongoose-error=''
            ng-minlength='3', required='')
          p.help-block(ng-show='(form.password.$error.minlength || form.password.$error.required) && submitted')
            | Password must be at least 3 characters.
          p.help-block(ng-show='form.password.$error.mongoose')
            | {{ errors.password }}

        .form-group(ng-class='{ "has-success": form.confirmPassword.$valid && submitted,\
        "has-error": form.confirmPassword.$invalid && submitted }')
          label Confirm Password
          input.form-control(type='password'
            name='confirmPassword'
            ng-model='user.confirmPassword'
            match="user.password"
            ng-minlength='3', required='')
          p.help-block(ng-show='form.confirmPassword.$error.match && submitted')
            | Passwords must match.
        
        .form-group
          label Role
          select.form-control(name='role', ng-model='user.role', ng-options='x for x in roles')          
          
          div
          button.btn.btn-inverse.btn-register(type='submit')
            | Create new user
          = ' '